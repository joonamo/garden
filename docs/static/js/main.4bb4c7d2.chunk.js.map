{"version":3,"sources":["GameOfLife.ts","Replay.ts","highscoreClient.ts","AppViewModel.ts","GardenViewModel.ts","Garden.tsx","Tools.tsx","Calendar.tsx","Score.tsx","ActionButton.tsx","BottomRow.tsx","ScoreBoard.tsx","HowToPlay.tsx","NameEntry.tsx","GameOverPopup.tsx","App.tsx","index.tsx"],"names":["NeighbourReport","countRowNeighbors","row","col","notThis","simulate","state","map","rowI","me","i","neighbors","prevRow","thisRow","nextRow","concat","reduce","prev","curr","countNeighbors","handleDead","handleAlive","ReplayEntry","data","pushInput","flower","push","applyData","garden","inventory","forEach","element","useFlower","postScore","player","score","replay","a","time","moment","toISOString","process","toValidate","gameId","validation","CryptoJS","MD5","toString","fetch","encodeURIComponent","method","headers","body","JSON","stringify","meta","getScores","json","e","appViewModel","reloadScores","reloadingScores","scoreboard","console","log","startReplayIdx","idx","gardenViewModel","doReplay","entry","o","elmnt","document","getElementById","scrollIntoView","this","playerName","localStorage","getItem","length","observable","action","wasReplay","submittingScore","showingGameOverModal","hideGameOverPopup","computed","name","setItem","thisOrPrevious","prevState","value","prevValue","isPrev","Scores","applyFrame","cumulative","frame","updateFrame","scores","1","2","3","dying1","dying2","dying3","_","j","Inventory","strFlower","String","day","replayData","currentFrameReplayData","replayFrame","endDate","format","window","setTimeout","gameOver","doingReplay","gameState","giveMoreSeeds","dying","helpfulArray","Array","resetGarden","padStart","date","dayString","fill","previousGarden","setDate","hasPlantedAny","startGame","selectedFlower","stopPlanting","add","parse","isPlanting","startSimulation","addEventListener","Garden","observer","props","overlay","className","GardenRow","key","GardenTile","clickHandler","preventDefault","startPlanting","setTile","classNames","onMouseDown","onMouseEnter","onTouchStart","showHelp","Tools","FlowerSelector","image","onClick","setFlower","src","alt","Calendar","diff","Score","toLocaleString","ActionButton","styleOverride","loading","disabled","text","confirmRestart","confirm","BottomRow","mainDisable","goodToGo","undefined","playStoredReplay","ScoreBoard","s","place","showGame","ExampleFlower","HowToPlay","href","target","rel","NameEntry","textRef","React","type","maxLength","placeholder","ref","setPlayerName","current","GameOverPopup","App","id","ReactDOM"],"mappings":"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","file":"static/js/main.4bb4c7d2.chunk.js","sourcesContent":["class NeighbourReport {\n  public 1 = 0\n  public 2 = 0\n  public 3 = 0\n}\n\nconst countRowNeighbors = (row: number[], col: number, notThis: boolean = false) => {\n  return [\n    (row[col - 1] ?? 0),\n    (notThis ? 0 : (row[col] ?? 0)),\n    (row[col + 1] ?? 0),\n  ]\n}\n\nexport const countNeighbors = (state: number[][], row: number, col: number): NeighbourReport => {\n  const prevRow = state[row - 1] ?? []\n  const thisRow = state[row]\n  const nextRow = state[row + 1] ?? []\n  return countRowNeighbors(prevRow, col).concat(\n    countRowNeighbors(thisRow, col, true)).concat(\n    countRowNeighbors(nextRow, col)).reduce(\n      (prev, curr) => ({\n        ...prev,\n        [curr]: (prev[curr] ?? 0) + 1,\n      }),\n      new NeighbourReport(),\n    )\n}\n\nconst handleDead = (neighbors: NeighbourReport): number => {\n  return neighbors[1] === 3 ? 1 :\n    neighbors[2] === 3 ? 2 :\n    neighbors[3] === 3 ? 3 :\n    0\n}\n\nconst handleAlive = (me: number, neighbors: NeighbourReport): number => {\n  switch (neighbors[me]) {\n    case 0:\n    case 1:\n      return 0\n    case 2:\n    case 3:\n      return me\n    default:\n      return 0\n  }\n}\n\nexport const simulate = (state: number[][]): number[][] => {\n  return state.map((row, rowI) => \n    row.map((me, i) => {\n      const neighbors = countNeighbors(state, rowI, i)\n      return me === 0\n        ? handleDead(neighbors)\n        : handleAlive(me, neighbors)\n    }),\n  )\n}","import { GardenState, Inventory } from './GardenViewModel'\n\nexport type serializedReplay = number[][][]\n\nexport class ReplayEntry {\n  data: number[][] = []\n\n  public pushInput = (row: number, col: number, flower: number) => {\n    this.data.push([row, col, flower])\n  }\n\n  public applyData = (garden: GardenState, inventory: Inventory) => {\n    this.data.forEach(element => {\n      const [ row, col, flower ] = element\n      garden[row][col] = flower\n      if (flower > 0) {\n        inventory.useFlower(flower)\n      }\n    })\n  }\n}\n\nexport const serializeReplay = (data: ReplayEntry[]): serializedReplay =>\n  data.map(entry => entry.data)\nexport const deserializeReplay = (data: serializedReplay): ReplayEntry[] =>\n  data.map(entry => {\n    const o = new ReplayEntry()\n    o.data = entry\n    return o\n  })","import { serializedReplay } from './Replay'\nimport moment from 'moment'\nimport CryptoJS from 'crypto-js'\n\nexport interface ScoreEntry {\n  score: number\n  player: string\n  replay: serializedReplay\n}\n\nexport const postScore = async (player: string, score: number, replay: serializedReplay) => {\n  const time = moment().toISOString()\n  const secret = process.env.REACT_APP_GAME_SECRET\n  const gameId = process.env.REACT_APP_GAME_ID as string\n  const toValidate = `${gameId}-${score}-${player}-${time}-${secret}`\n  const validation = CryptoJS.MD5(toValidate).toString()\n  return await fetch(\n    process.env.REACT_APP_SCORE_URL + `/game/${encodeURIComponent(gameId)}/score`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        player,\n        score,\n        time,\n        validation,\n        meta: {\n          replay,\n        },\n      }),\n    },\n  )\n}\n\nexport const getScores = async (): Promise<ScoreEntry[]> => {\n  const gameId = process.env.REACT_APP_GAME_ID as string\n  const data = await (await fetch(\n    process.env.REACT_APP_SCORE_URL + `/game/${encodeURIComponent(gameId)}/scores?distinct=true`,\n  )).json()\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return data.map((e: any) => ({\n    score: e.score,\n    player: e.player,\n    replay: e.meta?.replay ?? [],\n  }))\n}","/* eslint-disable no-restricted-globals */\n\nimport { observable, action, computed } from 'mobx'\nimport { ReplayEntry, serializeReplay, deserializeReplay } from './Replay'\nimport { postScore, ScoreEntry, getScores } from './highscoreClient'\nimport { gardenViewModel } from './GardenViewModel'\n\n\nclass AppViewModel {\n  @observable public playerName = ''\n  @observable public scoreboard: ScoreEntry[] = []\n  @observable public reloadingScores = false\n  @observable public submittingScore = false\n  @observable public previousScoreStanding = 0\n  @observable public showingGameOverModal = false\n\n  constructor() {\n    this.reloadScores()\n    this.playerName = localStorage.getItem('playerName') ?? ''\n  }\n\n  @action\n  public gameOver = async (wasReplay: boolean, score: number, replay: ReplayEntry[]) => {\n    if (!wasReplay) {\n      this.submittingScore = true\n      this.showingGameOverModal = true\n      try {\n        await postScore(this.playerName, score, serializeReplay(replay))\n      } catch (e) {\n        console.log('error submitting score', e)\n      } finally {\n        this.submittingScore = false\n      }\n    }\n    await this.reloadScores()\n  }\n\n  @action\n  public startGame = () => {\n    this.hideGameOverPopup()\n  }\n\n  @computed get goodToGo() {\n    return this.playerName.length > 0\n  }\n\n  public reloadScores = async () => {\n    this.reloadingScores = true\n    try {\n      this.scoreboard = await getScores()\n    } catch (e) {\n      console.log('error loading scores', e)\n    } finally {\n      this.reloadingScores = false\n    }\n  }\n\n  @action setPlayerName = (name: string) => {\n    this.playerName = name\n    localStorage.setItem('playerName', this.playerName)\n  }\n\n  @action hideGameOverPopup = () => {\n    this.showingGameOverModal = false\n  }\n\n  @action resetName = () => {\n    this.playerName = ''\n  }\n\n  startReplayIdx = (idx: number) => {\n    const score = this.scoreboard[idx]\n    if (score) {\n      gardenViewModel.doReplay(deserializeReplay(score.replay))\n      const elmnt = document.getElementById('title')\n      elmnt?.scrollIntoView()\n    }\n  }\n}\n\nexport const appViewModel = new AppViewModel()","import { observable, action } from 'mobx'\nimport { simulate } from './GameOfLife'\nimport moment, { Moment } from 'moment'\nimport { ReplayEntry } from './Replay'\nimport { appViewModel } from './AppViewModel'\n\nexport const gardenSize = 15\nexport const startMonth = '5'\nexport const lastMonth = '9'\nexport type GardenState = number[][]\nexport type GameState = 'Planning' | 'Simulating' | 'GameOver' | 'Replay'\nexport const dyingMinimum = 10\n\nexport const thisOrPrevious =\n  (state: GardenState, prevState: GardenState, row: number, col: number) => {\n    let value = state[row][col]\n    const prevValue = prevState[row][col]\n    let isPrev = false\n    if (value === 0 && prevValue > 0) {\n      isPrev = true\n      value = prevValue\n    }\n    return { value, isPrev }\n  }\n\nexport class Scores {\n  @observable cumulative = 0\n  @observable frame = 0\n  @observable '1' = 0\n  @observable '2' = 0\n  @observable '3' = 0\n  @observable 'dying1' = 0\n  @observable 'dying2' = 0\n  @observable 'dying3' = 0\n\n  public applyFrame = () => {\n    this.cumulative += this.frame\n  }\n\n  public updateFrame = (state: GardenState, prevState: GardenState) => {\n    const scores = {\n      1: 0,\n      2: 0,\n      3: 0,\n      dying1: 0,\n      dying2: 0,\n      dying3: 0,\n    }\n    state.map((row, i) => row.map((_, j) => {\n      const { value, isPrev } = thisOrPrevious(state, prevState, i, j)\n      scores[value] += 1\n      if (isPrev) {\n        scores[`dying${value}`] += 1\n      }\n      return null\n    }))\n    this['1'] = scores[1]\n    this['2'] = scores[2]\n    this['3'] = scores[3]\n    this['dying1'] = scores['dying1']\n    this['dying2'] = scores['dying2']\n    this['dying3'] = scores['dying3']\n    this.frame = (scores[1] || 1) * (scores[2] || 1) * (scores[3] || 1)\n  }\n}\n\nexport class Inventory {\n  @observable '1' = 0\n  @observable '2' = 0\n  @observable '3' = 0\n\n  public useFlower = (flower: number) => {\n    const strFlower = String(flower)\n    if (this[strFlower] > 0) {\n      this[strFlower]--\n      return true\n    }\n    return false\n  }\n}\n\n\nclass GardenViewModel {\n  @observable public garden: number[][] = [[]]\n  @observable public previousGarden: number[][] = [[]]\n  @observable public helpfulArray: number[] = []\n  @observable public selectedFlower = 1\n  @observable public isPlanting = false\n  @observable public scores = new Scores()\n  public day: Moment = moment()\n  @observable public dayString = ''\n  public inventory = new Inventory()\n  @observable public gameState: GameState = 'Planning'\n  private replayData: ReplayEntry[] = []\n  private currentFrameReplayData: ReplayEntry = new ReplayEntry()\n  @observable public doingReplay = false\n  private replayFrame = 0\n  @observable public hasPlantedAny = false\n  public endDate: Moment\n\n  constructor() {\n    this.helpfulArray = new Array(gardenSize).map((_, i) => i)\n    this.resetGarden()\n    this.endDate = moment(`2020-${lastMonth.padStart(2, '0')}-01`)\n  }\n\n  @action\n  public setDate = (date: moment.MomentInput) => {\n    this.day = moment(date)\n    this.dayString = this.day.format('MMMM Do')\n\n  }\n\n  @action\n  public resetGarden = () => {\n    this.gameState = 'Planning'\n    this.garden = this.helpfulArray.map(() => new Array<number>(gardenSize).fill(0))\n    this.previousGarden = this.helpfulArray.map(() => new Array<number>(gardenSize).fill(0))\n    this.scores = new Scores()\n    this.setDate(moment(`2020-${startMonth.padStart(2, '0')}-01`))\n    this.inventory['1'] = 10\n    this.inventory['2'] = 10\n    this.inventory['3'] = 10\n    this.replayData = []\n    this.currentFrameReplayData = new ReplayEntry()\n    this.replayFrame = 0\n    this.hasPlantedAny = false\n    appViewModel.startGame()\n  }\n\n  @action\n  public setTile = (row: number, col: number) => {\n    const isOk = this.gameState === 'Planning' &&\n      (this.selectedFlower === 0 || \n      (this.garden[row][col] === 0 &&\n        this.inventory.useFlower(this.selectedFlower)))\n    if (isOk) {\n      this.garden[row][col] = this.selectedFlower\n      this.scores.updateFrame(this.garden, this.previousGarden)\n      this.currentFrameReplayData.pushInput(row, col, this.selectedFlower)\n      this.hasPlantedAny = true\n    }\n  }\n\n  @action\n  public startSimulation = () => {\n    this.gameState = 'Simulating'\n    if (!this.doingReplay) {\n      this.replayData.push(this.currentFrameReplayData)\n      this.currentFrameReplayData = new ReplayEntry()\n    }\n    this.stopPlanting()\n    this.frame()\n  }\n\n  private frame = () => {\n    this.simulate()\n    if (this.day.format('D') !== '1') {\n      window.setTimeout(this.frame, 100)\n    } else if (this.day.format('M') === lastMonth) {\n      appViewModel.gameOver(this.doingReplay, this.scores.cumulative, this.replayData)\n      this.doingReplay = false\n      this.gameState = 'GameOver'\n    } else if (this.doingReplay) {\n      const frame = this.replayData[this.replayFrame]\n      if (frame) {\n        frame.applyData(this.garden, this.inventory)\n      }\n      this.replayFrame += 1\n      window.setTimeout(this.frame, 2000)\n    } else {\n      this.gameState = 'Planning'\n    }\n  }\n\n  @action\n  public simulate = () => {\n    this.setDate(this.day.add(1, 'day'))\n    this.previousGarden = this.garden\n    this.garden = simulate(JSON.parse(JSON.stringify(this.garden)))\n    this.scores.updateFrame(this.garden, this.previousGarden)\n    this.scores.applyFrame()\n    this.giveMoreSeeds(1, this.scores.dying1)\n    this.giveMoreSeeds(2, this.scores.dying2)\n    this.giveMoreSeeds(3, this.scores.dying3)\n  }\n\n  private giveMoreSeeds = (flower: number, dying: number) => {\n    if (dying >= dyingMinimum) {\n      this.inventory[String(flower)] = this.inventory[String(flower)] + 1\n    }\n  }\n\n  @action\n  public setFlower = (flower: number) => {\n    this.selectedFlower = flower\n  }\n\n  @action\n  public startPlanting = () => {\n    this.isPlanting = true\n  }\n\n  @action\n  public stopPlanting = () => {\n    this.isPlanting = false\n  }\n\n  @action\n  doReplay = (replay: ReplayEntry[]) => {\n    this.resetGarden()\n    this.replayData = replay\n    this.replayData[0].applyData(this.garden, this.inventory)\n    this.replayFrame = 1\n    this.doingReplay = true\n    window.setTimeout(this.startSimulation, 2000)\n  }\n\n  @action\n  playStoredReplay = () => {\n    this.doReplay(this.replayData)\n  }\n}\n\nexport const gardenViewModel = new GardenViewModel()\nwindow.addEventListener('mouseup', () => gardenViewModel.stopPlanting())","import { observer } from 'mobx-react'\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as React from 'react'\nimport { gardenViewModel, thisOrPrevious } from './GardenViewModel'\nimport './styles/sass/garden.scss'\nimport classNames from 'classnames'\n\nexport const Garden = observer((props: { overlay?: React.ReactNode | undefined}) => {\n  const { overlay } = props\n  return <div className=\"garden-container\">\n    <div className=\"garden\">\n      {gardenViewModel.garden.map((_, i) => <GardenRow row={i} key={`garden-row-${i}`} />)}\n    </div>\n    {\n      overlay && \n      <div className=\"garden-overlay\">\n        <div className=\"garden-overlay-content\">\n          {overlay}\n        </div>\n      </div>\n    }\n  </div> \n})\n\nconst GardenRow = observer((props: { row: number }) => {\n  const { row } = props\n  return <div className=\"garden-row\">\n    {(gardenViewModel.garden[row] ?? []).map(\n      (_, i) => <GardenTile row={row} col={i} key={`garden-tile-${row}-${i}`} />)\n    }\n  </div>\n})\n\nconst GardenTile = observer((props: { row: number, col: number }) => {\n  const { row, col } = props\n  const { value, isPrev } = thisOrPrevious(\n    gardenViewModel.garden,\n    gardenViewModel.previousGarden,\n    row,\n    col)\n  const clickHandler = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent<HTMLDivElement>,\n  ) => {\n    e.preventDefault()\n    gardenViewModel.startPlanting()\n    gardenViewModel.setTile(row, col)\n  }\n  const enterHandler = () => {\n    if (gardenViewModel.isPlanting) {\n      gardenViewModel.setTile(row, col)\n    }\n  }\n  // const n = countNeighbors(gardenViewModel.garden, row, col)\n  return <div className={classNames(\n    'garden-tile',\n    row === 0 ? 'hide-border-left' : null,\n    col === 0 ? 'hide-border-top' : null,\n    )}\n  >\n    <div\n      className={\n        classNames(\n          'garden-tile-content',\n          value > 0 ? `flower-${value}` : null,\n          isPrev ? 'withering' : null,\n        )\n      }\n      onMouseDown={clickHandler}\n      onMouseEnter={enterHandler}\n      onTouchStart={clickHandler}\n      >\n      {/* {`${n[1]},${n[2]},${n[3]}`} */}\n    </div>\n  </div>\n})","import { observer } from 'mobx-react'\nimport * as React from 'react'\nimport { gardenViewModel } from './GardenViewModel'\nimport classNames from 'classnames'\n\nconst showHelp = () => {\n  const elmnt = document.getElementById('how-to-play')\n  elmnt?.scrollIntoView()\n}\n\nexport const Tools = observer(() => {\n  return <>\n    <label className=\"label is-large has-text-light\">Tool</label>\n    <div className=\"field has-addons is-hidden-tablet is-fullwidth\">\n      <FlowerSelector\n        flower={0}\n        image=\"assets/shovel.png\"\n        key={`flower-selector-${0}`} />\n      <FlowerSelector flower={1} key={`flower-selector-${1}`} />\n      <FlowerSelector flower={2} key={`flower-selector-${2}`} />\n      <FlowerSelector flower={3} key={`flower-selector-${3}`} />\n    </div>\n\n    <div className=\"field is-hidden-tablet is-fullwidth\">\n      <div className=\"control\">\n        <button\n          className={classNames(\n            'button',\n            'is-fullwidth',\n            'is-info',\n            'is-small',\n          )}\n          onClick={showHelp}\n        >\n          How to play?\n        </button>\n      </div>\n    </div>\n\n    <div className=\"field is-hidden-mobile\">\n      <FlowerSelector\n        flower={0}\n        image=\"assets/shovel.png\"\n        key={`flower-selector-${0}`} />\n      <FlowerSelector flower={1} key={`flower-selector-${1}`} />\n      <FlowerSelector flower={2} key={`flower-selector-${2}`} />\n      <FlowerSelector flower={3} key={`flower-selector-${3}`} />\n    </div>\n  </>\n})\n\nconst FlowerSelector = observer((props: { flower: number, image?: string }) => {\n  const { flower, image } = props\n  const onClick = () => gardenViewModel.setFlower(flower)\n  return <div className=\"control\">\n    <button\n      className={classNames(\n        'button',\n        gardenViewModel.selectedFlower === flower ? 'is-success' : 'is-primary',\n        'scaling-button',\n        'is-fullwidth',\n        )}\n      onClick={onClick}>\n      <span className=\"icon is-left\">\n        <img src={image ?? `assets/flower-${flower}.png`} alt={`Plant flower ${flower}`} />\n      </span>\n      <span>\n        {gardenViewModel.inventory[String(flower)]}\n      </span>\n    </button>\n  </div>\n})","import { observer } from 'mobx-react'\nimport * as React from 'react'\nimport { gardenViewModel } from './GardenViewModel'\n\nexport const Calendar = observer(() => ( \n  <div className=\"columns is-mobile\">\n    <div className=\"column\">\n      <h4 className=\"title is-4 is-small\">{gardenViewModel.dayString}</h4>\n    </div>\n    <div className=\"column has-text-right\">\n      <h4 className=\"title is-4 is-small\">\n        {gardenViewModel.endDate.diff(gardenViewModel.day, 'month')} months left\n      </h4>\n    </div>\n  </div>\n))\n","import { observer } from 'mobx-react'\nimport * as React from 'react'\nimport { gardenViewModel } from './GardenViewModel'\n\nexport const Score = observer(() => ( \n  <h2 className=\"title is-2 is-small\">\n    Score: {gardenViewModel.scores.cumulative.toLocaleString('en-GB')}\n  </h2>\n))\n","import * as React from 'react'\nimport classNames from 'classnames'\n\nexport const ActionButton = (props: {\n  action: () => void\n  text: string\n  disabled?: boolean\n  loading?: boolean\n  styleOverride?: string\n}) => {\n  return <div className=\"control\">\n    <button\n      className={classNames(\n        'button',\n        props.styleOverride ?? 'is-danger',\n        'scaling-button',\n        'is-marginless',\n        'is-fullwidth',\n        props.loading ? 'is-loading' : null)}\n      onClick={props.action}\n      disabled={props.disabled}>\n      {props.text}\n    </button>\n  </div>\n}","/* eslint-disable no-restricted-globals */\n\nimport { observer } from 'mobx-react'\nimport * as React from 'react'\nimport { gardenViewModel } from './GardenViewModel'\nimport { ActionButton } from './ActionButton'\nimport { appViewModel } from './AppViewModel'\n\nconst confirmRestart = () => {\n  if (gardenViewModel.gameState === 'GameOver') {\n    gardenViewModel.resetGarden()\n  } else {\n    if (confirm(\n      'Are you sure you want to restart? You will lose your game!',\n    )) {\n      gardenViewModel.resetGarden()\n    }\n  }\n}\n\nexport const BottomRow = observer(() => {\n  const { gameState } = gardenViewModel\n  const mainDisable = !appViewModel.goodToGo ||\n    gameState === 'Simulating'\n  return <div className=\"columns\">\n    <div className=\"column\">\n      <ActionButton\n        action={confirmRestart}\n        text={gameState === 'GameOver' ? 'New Game' : 'Reset'}\n        disabled={mainDisable}\n        styleOverride={gameState === 'GameOver' ? 'is-primary' : undefined}\n      />\n    </div>\n    {\n      gameState !== 'GameOver' ? \n        <div className=\"column\">\n          <ActionButton\n            action={gardenViewModel.startSimulation}\n            text={\n              !gardenViewModel.hasPlantedAny \n                ? 'Plant some flowers!'\n                : 'Ready!'}\n            disabled={mainDisable || !gardenViewModel.hasPlantedAny}\n            loading={gameState === 'Simulating'}\n            styleOverride=\"is-primary\"\n          />\n        </div> \n      :\n        <div className=\"column\">\n          <ActionButton\n            action={gardenViewModel.playStoredReplay}\n            text={'Replay'}\n          />\n        </div>\n    }\n  </div>\n})\n","import { observer } from 'mobx-react'\nimport * as React from 'react'\nimport { appViewModel } from './AppViewModel'\nimport { ScoreEntry } from './highscoreClient'\nimport classNames from 'classnames'\nimport { gardenViewModel } from './GardenViewModel'\n// import classNames from 'classnames'\n\nexport const ScoreBoard = observer(() => {\n  return <>\n    <h4 className=\"title is-4 has-text-light\">High Scores</h4>\n    <h6 className=\"subtitle is-6 has-text-light\">\n      {\n        appViewModel.reloadingScores\n          ? 'Loading...'\n          : 'Click for replay!'\n      }\n    </h6>\n    {\n      appViewModel.goodToGo\n        ? appViewModel.scoreboard.map((s, i) =>\n          <Score entry={s} place={i} key={`score-${i}`} />)\n        : null\n    }\n  </>\n})\n\nconst Score = observer((props: { entry: ScoreEntry, place: number }) => {\n  const { entry, place } = props\n  return <div className=\"box has-background-white score-entry\">\n    <div className=\"columns is-mobile\">\n      <div className=\"column is-paddingless is-narrow score-place\">\n        <p>{place + 1}</p>\n      </div>\n      <div className=\"column score-data\">\n        <p>{entry.player}</p>\n        <p>{entry.score.toLocaleString('en-GB')}</p>\n        <div className=\"control play-tag\">\n          <button\n            className=\n            {classNames(\n              'button',\n              'is-marginless',\n              'is-primary',\n              'is-small',\n            )}\n            onClick={() => appViewModel.startReplayIdx(place)}\n            disabled={\n              gardenViewModel.gameState === 'Simulating' ||\n              gardenViewModel.doingReplay\n            }\n          >\n            Show\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n})\n","import * as React from 'react'\nimport moment from 'moment'\nimport { lastMonth, dyingMinimum } from './GardenViewModel'\nimport './styles/sass/howtoplay.scss'\nimport classNames from 'classnames'\n\nconst showGame = () => {\n  const elmnt = document.getElementById('title')\n  elmnt?.scrollIntoView()\n}\n\nconst ExampleFlower = (props: { flower: number }) => (\n  <div className={classNames('garden-tile', 'no-border')}>\n    <div className={`garden-tile-content flower-${props.flower}`} />\n  </div>\n)\n\nexport const HowToPlay = () => <div className=\"how-to-play\">\n  <h2 className=\"title is-2\">How to Play</h2>\n  <div className=\"columns is-mobile\">\n    <div className=\"column is-two-fifths is-color-grass\">\n      <div className=\"example-garden\">\n        <div className=\"garden-row\">\n          <div className=\"garden-tile no-border\" />\n          <ExampleFlower flower={1} />\n          <ExampleFlower flower={1} />\n        </div>\n        <div className=\"garden-row\">\n          <ExampleFlower flower={1} />\n          <ExampleFlower flower={2} />\n          <ExampleFlower flower={1} />\n        </div>\n        <div className=\"garden-row\">\n          <ExampleFlower flower={3} />\n          <ExampleFlower flower={1} />\n          <ExampleFlower flower={1} />\n        </div>\n        <div className=\"garden-row\">\n          <ExampleFlower flower={3} />\n          <ExampleFlower flower={3} />\n          <div className=\"garden-tile no-border\" />\n        </div>\n      </div>\n    </div>\n    <div className=\"column has-background-light is-three-fiths\">\n      <p className=\"example-number\">1</p>\n      <p>\n        Plant flowers in your garden. Hit <em>Ready!</em> when done and your flowers\n        will start to flourish or perish according to rules of{' '}\n        <a \n          href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n            Game of Life\n        </a>. See how different patterns evolve!\n      </p>\n    </div>\n  </div>\n\n  <div className=\"columns is-mobile\">\n    <div className=\"column has-background-grey-lighter is-three-fiths\">\n      <p className=\"example-number\">2</p>\n      <p>\n        You get scored every day by number or different flowers in your garden.\n        If {dyingMinimum} or more flowers wither in one day, you&#39;ll get seeds!\n      </p>\n    </div>\n    <div className=\"column has-background-success is-two-fifths scoring-example\">\n      <div className=\"scoring-example huge-text\">\n        <div className=\"garden-row\">\n          <ExampleFlower flower={1} />\n        </div>\n        <div className=\"garden-row\">\n          <p>&times;</p>\n        </div>\n        <div className=\"garden-row\">\n          <ExampleFlower flower={2} />\n        </div>\n        <div className=\"garden-row\">\n          <p>&times;</p>\n        </div>\n        <div className=\"garden-row\">\n          <ExampleFlower flower={3} />\n        </div>\n      </div>\n      <p>= Score</p>\n    </div>\n  </div>\n\n  <div className=\"columns is-mobile\">\n    <div className=\"column is-two-fifths has-background-info\">\n      <div className=\"final-guide\">\n        <div className=\"garden-row\">\n          <ExampleFlower flower={3}  />\n        </div>\n        <div className=\"garden-row\">\n          <div className=\"garden-tile no-border\">\n            <div className=\"garden-tile-content shovel\" />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div className=\"column has-background-light is-three-fiths\">\n      <p className=\"example-number\">3</p>\n      <p>\n        You have a chance to add more flowers in your garden once every month.\n        The game ends in {moment(`2020-${lastMonth.padStart(2, '0')}-01`).format('MMMM')}.\n        Good luck!\n      </p>\n    </div>\n  </div>\n\n  <div className=\"field is-hidden-tablet is-fullwidth\">\n    <div className=\"control\">\n      <button\n        className={classNames(\n          'button',\n          'is-fullwidth',\n          'is-info',\n          'is-small',\n        )}\n        onClick={showGame}\n      >\n        Let&#39;s Play!\n        </button>\n    </div>\n  </div>\n</div>","import * as React from 'react'\nimport { appViewModel } from './AppViewModel'\n\nexport const NameEntry = () => {\n  const textRef = React.useRef<HTMLInputElement>(null)\n  const onClick = () => {\n    appViewModel.setPlayerName(textRef.current?.value ?? '')\n  }\n\n  return <>\n    <div className=\"dummy\" />\n    <div className=\"box\">\n      <label className=\"label is-large\">Enter your name</label>\n      <div className=\"field has-addons\">\n        <div className=\"control\">\n          <input className=\"input\" type=\"text\" maxLength={15} placeholder=\"...\" ref={textRef} />\n        </div>\n        <div className=\"control\" onClick={onClick}>\n          <button className=\"button is-info\">\n            OK!\n          </button>\n        </div>\n      </div>\n    </div>\n    <div className=\"dummy\" />\n  </>\n}","import * as React from 'react'\nimport { appViewModel } from './AppViewModel'\nimport { gardenViewModel } from './GardenViewModel'\nimport { ActionButton } from './ActionButton'\nimport { observer } from 'mobx-react'\n\nexport const GameOverPopup = observer(() => {\n\n  return <>\n    <div className=\"dummy\" />\n    <div className=\"box\">\n      <h1 className=\"title is-1\"> Game Over! </h1>\n      <p>Your score was {gardenViewModel.scores.cumulative.toLocaleString('en-GB')}</p>\n      {\n        appViewModel.submittingScore \n          ? <p>Submitting score...</p>\n          : null\n      }\n      <ActionButton\n        action={appViewModel.hideGameOverPopup}\n        text=\"OK\"\n      />\n    </div>\n    <div className=\"dummy\" />\n  </>\n})","import { observer } from 'mobx-react'\nimport * as React from 'react'\nimport { Garden } from './Garden'\nimport { Tools } from './Tools'\nimport { Calendar } from './Calendar'\nimport { Score } from './Score'\nimport { BottomRow } from './BottomRow'\nimport { ScoreBoard } from './ScoreBoard'\nimport { HowToPlay } from './HowToPlay'\nimport { appViewModel } from './AppViewModel'\nimport { NameEntry } from './NameEntry'\nimport { GameOverPopup } from './GameOverPopup'\n\n@observer\nclass App extends React.Component {\n  public render() {\n    return (<>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div >\n            <h1 className=\"title is-1\" id=\"title\"> Conway&#39;s Garden Life </h1>\n            <div className=\"columns box is-paddingless has-background-info\">\n              <div className=\"column\">\n                <Tools />\n              </div>\n\n              <div className=\"column has-background-light is-three-fifths\" id=\"game\">\n                <Score />\n                <Garden\n                  overlay={\n                    !appViewModel.goodToGo ? <NameEntry />\n                      : appViewModel.showingGameOverModal ? <GameOverPopup />\n                        : undefined\n                  }\n                />\n                <Calendar />\n                <BottomRow />\n              </div>\n\n              <div className=\"column\">\n                <ScoreBoard />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\" id=\"how-to-play\">\n            <HowToPlay />\n          </div>\n        </div>\n      </section>\n\n      <section className=\"section in-memoriam has-text-grey-light\">\n        <p>Created by{' '}\n          <a href=\"https://joonamo.com\">Joonamo</a>\n          {' '}for{' '}\n          <a href=\"https://ldjam.com/events/ludum-dare/46/conways-garden-life\">Ludum Dare 46</a></p>\n        <p>In memoriam John Conway 1937 - 2020</p>\n      </section>\n    </>\n    )\n  }\n}\n\nexport default App\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport 'mobx-react/batchingForReactDom'\nimport App from './App'\nimport './styles/sass/style.scss'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement,\n)\n"],"sourceRoot":""}